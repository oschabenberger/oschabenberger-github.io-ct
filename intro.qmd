# Computational Thinking (CT) {#sec-intro-ct}

<!---
Wing's paper on CT
https://people.cs.vt.edu/~kafura/CS6604/Papers/CT-What-And-Why.pdf
--->

:::{.callout-tip title="Quotes"}
:::{.flushright}
Computational thinking is not just or all about computer science. The educational benefits of
being able to think computationally--starting with the use of abstractions--enhance and reinforce
intellectual skills, and thus can be transferred to any domain.\
[Jeanette Wing, Computational Thinking--What and Why?]{.quoteauthor}
\
\
Computational thinking is predominant in the world today, driving the worst trends\
in our society and interactions, and must be opposed by a real systemic literacy.\
[James Bridle, New Dark Age: Technology and the End of the Future]{.quoteauthor}
:::
:::

In the broad sense, **computational thinking** (CT) is a problem-solving methodology
that develops solutions for complex problems by breaking them down into individual
steps. Well, are not most problems solved this way? Actually, yes. We all apply
computational thinking methodology every day. As we will see in the example below, 
cooking a pot of soup involves computational thinking.

In the narrow sense, computational thinking is problem solving by expressing
the solution in such a way that it can be implemented through a computer---using
software and hardware. The term *computational* in CT derives from the fact that
the methodology is based on core principles of computer science. It does not mean
that all CT problems are solved through coding. It means to solve problems by
thinking like a computer scientists. 

According to @Wing_2011, computational thinking describes the mental activity in 
formulating a problem to admit a computational solution. The solution can be carried 
out by a human, a machine, or both together. 

## Elements of CT

What is that like? The five elements of computational thinking are

1. **Problem Definition**. What problem are we trying to solve.
2. **Decomposition** (Factoring). Break the problem into smaller parts.
3. **Pattern Recognition**. Learning connections and relationships between the parts.
4. **Generalization** (Abstraction). Recognize relevant details.
5. **Algorithmic Design**. Define the solution as a series of repeatable steps.

Let's look at the steps in more detail.

### Problem Definition

This should go without saying, before attempting to build a solution one should 
know what the problem is. It seems obvious but problems are not always what they
seem. It takes creativity and thinking to uncover what the real problem is that
should be solved. We often take problems as given, fail to uncover the real
problem, and end up solving the wrong one [@Kroese_2020]. Blockbuster turned
down a deal with Netflix because it was convinced that customers would not want
to have movies delivered to their home. LOL. If customers are telling you that
they want "faster horses", are they looking to you to optimize the amount of
hay, water, and carrots you feed horses or are they looking for a faster mode 
of transportation? Disney's parks were criticized by customers for long queues
for the rides, customers spent hours waiting for their turn. The obvious solutions
would be to build more rides or allow fewer visitors in the parks, both would not
be good for Disney's bottom line. @Kroese_2020 writes

:::{.quote}
instead of investing millions, Disney World simply added themed music, videos, 
and introduction stories to the waiting areas. Instead of decreasing the waiting time, 
they increased its value. 
:::

---

We also get it wrong when we are building solutions first and then look for 
the problems they might solve. The world of technology is littered with solutions
looking for a problem. 

:::{.callout-note title="Solution looking for a problem"}
Solutions looking for problems are commonplace. If someone
is trying to sell you a new car when there is nothing wrong with your current car,
they (salesman) have a solution (new car) but there is no problem (new car is
not needed). So they might try to create a problem by selling you on the benefits
of the new model.

On the other hand it is good to innovate and create new solutions even if not 
all problems the innovation solves are known beforehand. When Karl Benz combined
in 1885 a one-cylinder internal combustion engine with a carriage (@fig-firstcar),
he created the first automobile, the Benz Patent-Motorwagen. He probably did not 
imagine the many future applications of the technology.

![Benz Patent-Motorwagen, the first automobile.](images/FirstAutomobile.png){#fig-firstcar fig-align="center" width=50% .lightbox}
:::

Another wonderful example of a solution that did not solve a problem is the 
story of the company Juicero.

:::{.example}
::::{.example-header}
Example: Juicero, the juicer no one needed.
::::
::::{.example-container}
Trying to cash in on the wellness craze, The Silicon Valley company Juicero 
aimed to bring the experience of single-serve coffee makers like Keurig to the
world of fruit and vegetable juice. Juicero developed a pricey and over-engineered
machine to produce single-serve cold-pressed juice at the touch of a button.

![The $699 Juicero juicer.](images/Juicero.png){#fig-juicero fig-align=center width=45%}

The business model was a subscription service. You buy the Juicero juicing machine
for the whopping price of $699, subscribe to the service, and the company will
regularly send you pouches of diced vegetables and fruits which you run through the
juicer. The machine was touted as very powerful, having enough force to "lift 
two Teslas". Apparently, the whole thing was a great idea by Silicon Valley 
standards and Juicero raised $120 million in venture capital funding.

The user experience had a few quirks that turned out to be unpopular. You had to
use the pouches from the company at $5--$7 per pack. You could buy the pouches
only if you owned the $699 juicer. The pouches had an expiration date, lasted
only 8 days, and needed to be scanned before running through the juicer; the 
machine would refuse to process pouches that were past the expiration date. 

The death knell tolled when Bloomberg reviewed the machine and determined that 
you can just as easily squeeze the pouches by hand. Check out [this](https://www.bloomberg.com/news/features/2017-04-19/silicon-valley-s-400-juicer-may-be-feeling-the-squeeze)
Bloomberg video that destroyed the myth of the juicing machine with four
tons of pressing power.

British daily newspaper The Guardian mocked Juicero as an example of the 
Silicon Valley culture to raise large amounts of money for solutions to problems
that do not exist. 
::::
:::

### Decomposition (Factoring)

This element of computational thinking ask to break the 
complex problem into smaller, manageable parts and by doing so helps to focus the
solution on the aspects that matter, eliminating extraneous stuff.

Smaller problems are easier to solve and can be managed independently. A software 
developer decomposes a task into several functions, for example, one that takes user 
input, one that sorts data, one that displays results. These functions can be developed 
separately and are then combined to produce the solution. Sorting can further be 
decomposed into subproblems, for example, the choice of data structure (list, tree, etc.), 
the sort algorithm (heap, quicksort, bubble, ...) and so on.

To understand how something works we can factor it into its parts and study
how the individual parts work by themselves. A better understanding of the whole 
results when we reassemble the components we now understand. For example, to figure
out how a bicycle works, decompose it into the frame, seat, handle bars, chain, pedals,
crank, derailleurs, brakes, etc. 

### Pattern recognition

Pattern recognition is the process of learning 
connections and relationships between the parts of the problem. In the bicycle
example, once we understand the front and rear derailleurs, we understand how they 
work together in changing gears. Pattern recognition helps to simplify the problem
beyond the decomposition by identifying details that are similar or different.

:::{.callout-note title="Carl Friedrich Gauss"}
Carl Friedrich Gauss (1777--1855) was one of the greatest thinkers of his time
and widely considered one of the greatest mathematicians and scientists of all time. 
Many disciplines, from astronomy, geodesy, mathematics, statistics, and physics list 
Gauss as a foundational and major contributor. 

In *The Prince of Mathematics*, @Tent2006 tells the story of an arithmetic 
assignment at the beginning of Gauss' third school year in Brunswick, Germany. Carl
was ten years  old at the time.
Herr Büttner, the teacher wanted to keep the kids quiet for a while and asked them 
to find the sum of the first 100 integers, 
$$\sum_{i=1}^{100}i
$$
The students were
to work the answer out on their slates and place them on Herr Büttner's desk 
when done. Carl thought about the problem for a minute, wrote one number on
his slate and placed it on the teacher's desk. He was the first to turn in a 
solution and it took his classmates much longer. The slates were placed on top of
the previous solutions as students finished. Many of them got the answer 
wrong, messing up an addition somewhere along the way. Herr Büttner, going through
the slates one by one found one wrong answer after another and expected Gauss' 
answer also to be wrong, since the boy had come up with it almost instantly. 
To his surprise--or dismay--Gauss' slate showed no work, Carl had written on it
just one number, 5,050, the correct answer. 

Carl explained

>*Well, sir, I thought about it. I realized that those numbers were all in a row, that
they were consecutive, so I figured there must be some pattern. So I added the 
first and the last number: 1 + 100 = 101. Then I added the second and the next to
last numbers: 2 + 99 = 101. [...] That meant I would find 50 pairs of numbers that
always add up to 101, so the whole sum must be 50 x 101 = 5,050*

Carl had recognized a pattern that helped him see the connected parts of the 
problem: a fixed number of partial sums of the same value.
:::

### Generalization (Abstraction)

Once the problem is decomposed and the patterns are recognized,
we should be able to see the relevant details of the problem and how we go about
solving the problem. This is where we derive the core logic of the solution, the **rules**. 
For example, to write a computer program to solve a jigsaw puzzle, you would not 
want to write code specific to one particular puzzle image. You want code that
can solve jigsaw puzzles in general. The specific image someone will use for the
jigsaw puzzle is an irrelevant detail.

A rectangle can be decomposed into a series of squares (@fig-rectangle-decomp).
Calculating the area of a rectangle as width x height is a generalization of 
the rule to calculate the area of a square as width-squared.

![Decomposing a 12 x 8 rectangle into six 4 x 4 squares to generalize computation of the area](images/RectangleDecomposition.png){#fig-rectangle-decomp fig-align="center" width=50%}

### Algorithm design

The final element of CT involves another form of thinking,
**algorithmic thinking**. Here we define the solution as a series of steps to
be executed. Algorithmic thinking does not mean the solution has to be implemented
by a computer, although this is the case in the narrow sense of CT. The point of
the algorithm is to arrive at a set of repeatable, step-by-step instructions, whether 
these are implemented by humans, machines, or a computer. Capturing the solution in
an algorithm is a step toward **automation**.\
\
@fig-soup-recipe shows an algorithm to produce pumpkin soup, repeatable instructions
that lay out the ingredients and how to process them in steos to transform them
into soup.

![A recipe for pumpkin soup is an algorithm.](images/PumpkinSoupRecipe.png){#fig-soup-recipe fig-align="center" width=75% .lightbox}

## Making Pumpkin Soup

Let's apply the elements of computational thinking to the problem of making
pumpkin soup. 

#### Decomposition
Decomposition is the process of breaking down a complex problem into smaller, more manageable parts. In the case of making pumpkin soup, we can break it down into several steps:

- **Ingredients**: Identify the key ingredients required for the soup.
  - Pumpkin
  - Onion or Leek
  - Garlic
  - Stock (vegetable or chicken)
  - Cream (optional)
  - Salt, pepper, and spices (e.g., nutmeg, cinnamon)
  - Olive oil or butter for sautéing
- **Preparation**: Break down the actions involved in preparing the ingredients.
  - Peel and chop the pumpkin
  - Chop the onion and garlic
  - Prepare spices and seasoning
- **Cooking**: Identify the steps in cooking the soup.
  - Sauté the onion and garlic
  - Add the pumpkin and cook it
  - Add stock and bring to a simmer
  - Puree the mixture
  - Add cream and season to taste
- **Final Steps**: Focus on finishing touches.
  - Garnish (optional)
  - Serve and taste for seasoning adjustments

### Pattern Recognition

What are the similar elements or repeating steps in the problem?

- **Common cooking steps**: Many soups follow a similar structure: sautéing vegetables, 
adding liquid, simmering, and then blending or pureeing.
- **Ingredient variations**: While the exact ingredients for pumpkin soup may vary 
(e.g., adding coconut milk instead of cream), the basic framework of the recipe 
remains the same.
- **Timing patterns**: There’s a pattern to the cooking times: first sautéing for 
a few minutes, then simmering the soup for about 20-30 minutes, followed by blending.

### Generalization

We can generalize (abstract) the process of making pumpkin soup into a more 
general recipe for making any pureed vegetable soup, regardless of the specific
ingredients.

- **Essential components**: 
  - A base (onions, garlic, or other aromatics)
  - A main vegetable (in this case, pumpkin)
  - Liquid (stock, broth, or water)
  - Seasoning and optional cream

- **General process**:
  1. Sauté aromatics.
  2. Add the main vegetable and liquid.
  3. Simmer until the vegetable is tender.
  4. Blend until smooth.
  5. Adjust seasoning and add cream if desired.


### Algorithm Design

Here is a simple algorithm for making pumpkin soup:

1. **Prepare ingredients**:
   - Peel and chop the pumpkin into cubes.
   - Chop the onion and garlic.
2. **Sauté aromatics**:
   - In a pot, heat oil or butter over medium heat.
   - Add chopped onion and garlic, sauté for 5 minutes until softened.
3. **Cook pumpkin**:
   - Add chopped pumpkin to the pot and sauté for 5 minutes.
   - Add stock to cover the pumpkin (about 4 cups) and bring to a boil.
4. **Simmer**:
   - Lower the heat, cover, and let the soup simmer for 20-30 minutes until the 
   pumpkin is tender.
5. **Blend the soup**:
   - Use an immersion blender or transfer the soup to a blender. Puree until smooth.
6. **Add cream and seasoning**:
   - Stir in cream (optional) and season with salt, pepper, and spices to taste 
   (e.g., nutmeg or cinnamon).
7. **Serve**:
   - Pour into bowls and garnish with optional toppings (e.g., a swirl of cream, 
   roasted seeds, or fresh herbs).

@fig-soup-recipe is a specific implementation of the algorithm.

By applying computational thinking, we decomposed the task of making pumpkin soup 
into smaller steps, recognized patterns in the cooking process, abstracted the 
general process for making soups, and designed an algorithm to efficiently make 
pumpkin soup. This method helps streamline the cooking process, ensures nothing 
is overlooked and provides a clear, repeatable procedure.

## Importance of CT {#sec-intro-ct-importance}

Computational thinking as a methodology is applied nowadays in almost any domain
and to many problems. Decomposing a problem into parts, recognizing patterns,
abstracting the problem essentials and capturing them in an algorithm is an
effective approach to deal with many problems. 

Computational thinking is becoming the new literacy of the 21st century because
it enables you to bend computation to your needs [@Wing_2011]. It has begun to
influence disciplines and professions beyond science and engineering. 
Algorithmic medicine, computational archaeology, computational economics, 
computational finance, computation and journalism, computational law, 
computational social science, and digital humanities are now areas of active study.

The rise of computational thinking is also due to the fact that many more problems 
are solved through software and computing today than in the past. We have become 
very good at capturing the essential details of processes and phenomena through
**models**, which by their very nature are abstractions of the prevailing 
patterns in those processes. And the implementation of the models frequently
involves the design and deployment of algorithms.

Financial analysts make investment decisions based
on mathematical models of market behavior. Banks decide whether to award a loan
based on statistical models for the probability of loan default. Insurance 
premiums are based on risk models. A healthcare provider chooses a treatment
plan based on assessment of risk factors and predictions of disease progression,
based on medical knowledge and models that describe patient outcomes.

In 2011, Mark Andreessen of VC firm Andreessen-Horowitz (known as a16z) declared

:::{.quote}
Software is eating the world.
:::

Why was this happening? @Andreessen_2011 cites several reasons, among them

:::{.quote}
Six decades into the computer revolution, four decades since the invention of the 
microprocessor, and two decades into the rise of the modern Internet, all of the 
technology required to transform industries through software finally works and 
can be widely delivered at global scale.
:::

The largest book seller, Amazon, is a software company. Prior to the software
revolution, it was brick-and-mortar book stores like Borders. The largest provider
of video services, Netflix, is a software company. Previously, you rented physical
video cassette tapes at Blockbuster. The music we listen to today is stored 
digitally as a file, distributed through software, and made audible through software. 
The best recruiting company, LinkedIn, is a software company. Some of the best
movies are created by Pixar, a software company. You get the idea, I'll stop here.

While software implementations of problem solving have upended many industries,
the way we build and use software, and the types of problems we can solve with
it, is itself being upended, thanks to the advances in large-language models (LLMs)
like ChatGPT, Claude, Gemini, and others.

The shift toward computational thinking and the importance of solving problems
through software has become most evident in 2024, when Nobel prizes in Physics
and Chemistry were awarded not to scientists in those fields, but to computer
scientists and artificial intelligence researchers who developed the foundational
computational methods that helped to advance Physics and Chemistry (@fig-nobel-physics and
@fig-nobel-chemistry).

![2024 Nobel Prize winners in Physics](images/NobelPrizePhysics.png){#fig-nobel-physics fig-align="center" width=90% .lightbox}


![2024 Nobel Prize winners in Chemistry](images/NobelPrizeChemistry.png){#fig-nobel-chemistry fig-align="center" width=90% .lightbox}

Demis Hassabis, for example, is the CEO of Google DeepMind, the company behind
AI projects such as AlphaGo, the reinforcement-learning trained system that 
accomplished what was thought impossible for a computer to do: beat the best 
Go player in the world.

Geoffrey Hinton is a leading figure in research on artificial neural networks and
deep learning. He is often considered the "Godfather of AI". He is co-author of
a 1986 paper that popularized back-propagation, an algorithm that efficiently
computes the gradients in a neural network with many layers. 

Breaking with tradition, the Nobel committee awarded these prizes not to scientists
who developed grand new theories of how the world works, but to scientist who 
develop the computational tools that help us develop grand new theories of how 
the world works.

## Wicked Problems {#sec-intro-wicked}

Not all problems are made the same. Simple problems can be dealt with by 
*linear thinking*: here is a problem, this is the solution, and the problem goes
away. @Grint_2022 distinguishes between three types of problems:

1. **Tame problems**: we know how to fix the problem with standard operating 
procedures (SOPs). Tame problems require *managers* to perform or delegate the 
problem solving.

2. **Critical problems**: crises that are self-evident, and we are hoping someone
knows how to sort them out. These problems require *commanders* who know the 
solution, are decisive, and direct and coerce others.

3. **Wicked problems**: problems we do not know how to fix. Solving wicked problems
requires *leaders* who recognize their own limits and the wicked nature of the 
problem.

A problem can be tame for some and wicked for others. Performing heart surgery
would be a wicked problem for most of us because we have no clue how to go about
it. For an experienced heart surgeon who performs the procedures every day this
is a tame problem. Participants of the same problem can experience the same 
situation from different problem perspective. A traffic accident is a tame 
problem for a cop who deals with accidents routinely. For the drivers involved
the problem presents a crisis.

A single situation can have overlapping problem types and call for a combination
of decision styles to deal with it. The Covid-19 pandemic is a case in point.
@Hoban_2023 writes

:::{.quote}
vaccine development and distribution are simple problems as they follow known
procedures; isolation, distancing and mask wearing are critical problems but both 
the simple and the critical shade over into the wicked problems of a culture 
where people may not trust their government, governments may have political 
agendas, people’s exposure and susceptibility to infection are linked to socioeconomic 
factors which in turn are downplayed by governments and so on.
:::

:::{.assignment}
::::{.assignment-header}
Assignment: CO2 Emissions
::::
::::{.assignment-container}
Some think that we are emitting too much CO2 by burning fossil fuels and that
this is a tame problem: move from energy based on fossil fuels to renewable
energy sources. No more fossil fuels, no more CO2 emissions from burning fossil
fuels, problem solved.

Others think that reducing CO2 emissions is a wicked problem. A lot of CO2 emissions
are already baked into the system and even if all CO2 emissions would stop today
the climate would still be changing. Any action we take to change CO2 emissions
changes the system itself. Once we manipulate the system do we have to look at
other components besides the climate?

Give reasons why reducing CO2 emissions is a wicked problem.
::::
:::

Are wicked problems so difficult that they defy solution? Should we just 
throw up our arms and walk away? Not at all.
By definition a wicked problem does not have a solution, at least not yet. 
Heart surgery was a wicked problem for surgeons until medical science advanced
sufficiently to make it tameable. Today, heart surgery is a known problem with
known solutions and standard operating procedures. Wicked problems require
not managers or commanders, but leaders who recognize their own limits and 
the wickedness of the problem. Leaders who can learn and grow, make and admit
mistakes, and seek solutions for the public good.

@Hoban_2023 gives three guidelines for dealing with wicked problems:

1. **Do no harm**: do nothing that has a chance of doing catastrophic harm. 
Do not attempt to change the entire system at once.

2. **Find where you are**: you are somewhere in the middle of the problem. Every
actor who wants to influence the system is part of the system.

3. **Creativity through constraints**: just like the rules of a game force you
to innovate within the constraints of the rules, know what you can and cannot do.
Humans not being able to fly or breath underwater are wicked problems. Knowing
that we cannot solve them by flapping our arms or by growing gills identifies
constraints that point in the direction of a solution.

