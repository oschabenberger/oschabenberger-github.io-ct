

# First Steps in `R` {#sec-steps-r}

## Getting Started with R {#sec-getting-started-R}

::: {.callout-tip title="TL;DR What you Need" collapse="true"}
To work with `R` in this course, you need to be able to run `R` code, 
mix it with text in a notebook-style environment, and turn program and output 
into pdf and html files. To accomplish this you will need

-   **`R`**. Download from [CRAN](https://cran.rstudio.com/)
-   **RStudio**. Download RStudio Desktop from [Posit](https://posit.co/downloads/)

You can skip `R` and RStudio installs if you do the work in a [Posit Cloud](https://posit.cloud/) 
environment. Posit Cloud accaounts are available for free [here](https://posit.cloud/plans/free).
:::

To get started with `R` as a statistical programming language you need access to
`R` itself and a development environment from which to submit `R` code.

Download `R` for your operating system from the [CRAN](https://cran.rstudio.com/) site. 
CRAN is the "Comprehensive R Archive Network" and also serves as the package management 
system to add new packages to your installation.

If you use VS Code as a development environment, add the "R Extension for Visual Studio" 
to your environment. We are focusing on RStudio as a development environment here.

### Posit Cloud

In today's cloud world, you can get both through [Posit Cloud](https://posit.cloud/). 
Posit is the company behind RStudio, Quarto, and other cool tools. Their cloud 
offering gives you access to an RStudio instance in the cloud. You can sign up 
for a free account [here](https://posit.cloud/plans/free). The only drawback of 
the free account is its limitations in terms of RAM, CPU, execution time, etc. 
For the work you will be doing in this course, and probably many other courses, 
you will not exceed the limitations of the free account.

Once you have created an account, the work space is organized the same way as an
RStudio session on your desktop.

### `R` and RStudio

RStudio is an integrated development environment (IDE) for `R`, but supports 
other languages as well. For example, using Quarto in RStudio, you can mix `R`, 
Python, and code from other languages in the same document. 

Download Rstudio Desktop [here](https://posit.co/downloads/).

The RStudio IDE is organized in panes, each pane can have multiple tabs (@fig-rstudio-ide). 
The important panes are

-   **Source**. The files you edit. These can be R files (.R), R Markdown (.Rmd), 
Quarto (.qmd), or any other text files.

-   **Console**. Here you can enter `R` commands directly at the command prompt "\>". 
This pane also has a `Terminal` tab for an OS terminal and a `Background Jobs` 
tab. The latter is important when you "knit" documents into pdf or html format.
*Knitting* a file in RStudio is the process of converting a .Rmd file into 
a pdf, html, or Word document.

-   **Environment**. Displays information about the objects created in the `R` 
session. You can click on an object for a more detailed look at it in the `Viewer`.

-   **Help**. This pane contains many useful tabs, such as a File browser, package 
information, access to the documentation and help system. Plots generated from the 
`Console` or from an `R` script are displayed in the `Plots` tab of this pane.

![RStudio IDE](images/RStudio.png){#fig-rstudio-ide .lightbox fig-align="center" width="90%"}

### Installing Packages

Capabilities of `R` come from functions in packages. The basic `R` installation
comes with basic packages that are loaded automatically into an `R` session. The 
`stats` package, for example, provides many basic statistical functions. To see
the packages loaded in your workspace, enter this command at the console prompt:

```{r, eval=FALSE}
(.packages())
```

To add capabilities beyond the basic packages to an `R` installation, you need
to go through a two-step process.

1.  Install the package
2.  Load the package in your `R` session with the `library()` command.

Installing the package is done once, this step adds the package to your system. 
Loading the library associated with the package is done in every `R` session that
needs to use the functionality of the package. Once you get going with `R` you
will install many packages to tailor `R` to your needs. Packages that are 
made available through repositories of [CRAN](https://cran.r-project.org/), 
the Comprehensive R Archive Network, are known as **standard** packages. 

The following command installs three CRAN packages, `ISLR2`, `rpart` and `rpart.plot`,
in one fell swoop on your system. Copy the command to the console prompt in 
`RStudio` and hit <Return>.

```{r eval=FALSE}
install.packages(c("rpart","rpart.plot","ISLR2"))
```

The `ISLR2` library provides data sets that are used in @James2013_ISLR2. `rpart`
is a popular library for training decision trees on data and `rpart.plot` produces
nice-looking visualizations of decision trees.  

### .R and .Rmd Files

You save `R` code in two file types. Files with .R extension are called R scripts,
they contain *pure* code and comments. Files with .Rmd extension are in R Markdown
notebook format; they combine R code with narrative text and are the basis for
high-quality professional documents. Code in R Markdown files is contained in 
**code chunks**. @fig-rchunk1 shows a level-2 header, narrative text, and a 
code chunk in a R Markdown document. The code chunk begins with the ` ```{r}`
and ends with the ` ``` ` character sequence. `{r}` after the opening ticks indicates
that the code that follows is in the R programming language. 

![Narrative text and a code chunk in a .Rmd file](images/Rchunk1.png){#fig-rchunk1 fig-align="center" width=85%}

To execute the code in a code chunk there are several options:

1. Place the cursor somewhere in the chunk and hit `<Cmd> <Shift> <Return>`
2. Click on the green arrow at the right edge of the chunk
3. Place the cursor on a line of code inside the chunk and hit `<Cmd> <Return>`.
4. Highlight several lines of code and hit `<Cmd> <Return>`

The first two options execute **all** lines of code inside the chunk--top to bottom.
The third option executes only the line the cursor was placed on and advances
to the next line of code. One technique to run an entire chunk line by line is 
to place the cursor at the beginning of the chunk and repeatedly hit `<Cmd> <Return>`
until you reach the end of the chunk.

@fig-rscript1 shows the content of an R script. Lines that start with a `#` 
character are comments. Executing the code in an R script is akin to options
3 and 4 in the list above. When you place the cursor on a line of code and hit
`<Cmd> <Return>` the line is executed and the cursor advances to the next line. 
You can also highlight multiple lines and execute them together by hitting 
`<Cmd> <Return>`. That is necessary if a function requires to be run together
with another function. The `legend` statement in @fig-rscript1 cannot be run
by itself, it needs to be associated with a graphic. To obtain the desired 
result, a plot with a legend, the `plot` and `legend` statement need to be
executed together. 

![Contents of a .R script file](images/Rscript1.png){#fig-rscript1 fig-align="center" width=85%}

Instead of hitting the keys to run code you can also click on the
"Run" icon near the top of the screen. The available run options are different
for R scripts and R Markdown files.

## College Data

To get familiar with basic steps in working with data in `R` we use the `College`
data set that is part of the `ISLR2` package. The data set contains information
from the 1995 US News and World Report college rankings on 777 colleges in the
U.S. The data frame contains the following variables:

| **Variable Name** | **Description** |
|:-----|:-----------|
| `Private`     | A factor with levels No and Yes indicating private or public university|
| `Apps`        | Number of applications received |
| `Accept`      | Number of applications accepted |
| `Enroll`      | Number of new students enrolled |
| `Top10perc`   | Pct. new students from top 10% of H.S. class |
| `Top25perc`   | Pct. new students from top 25% of H.S. class |
| `F.Undergrad` | Number of full time undergraduates |
| `P.Undergrad` | Number of part time undergraduates |
| `Outstate`    | Out-of-state tuition |
| `Room.Board`  |  Room and board costs |
| `Books`       | Estimated book costs |
| `Personal`    | Estimated personal spending |
| `PhD`         | Pct. of faculty with Ph.D.'s |
| `Terminal`    | Pct. of faculty with terminal degree |
| `S.F.Ratio`   | Student/faculty ratio |
| `perc.alumni` | Pct. alumni who donate |
| `Expend`      | Instructional expenditure per student |
| `Grad.Rate`   | Graduation rate |

: Variables in `College` data set {.striped}

### Exploratory Data Analysis

**Exploratory Data Analysis** (EDA) is the "first date with the data." 
EDA consists of computing summary statistics of the variables, visualizing
their distribution and exploring relationships between the variables.
The goal of EDA is to develop understanding of the data we are dealing with
and to suggest interesting questions and subsequent analyses. 

EDA can also reveal issues with data quality, for example, data entry errors,
outliers, or unobserved (missing) values.

:::{.assignment}
::::{.assignment-header}
Exercise: EDA for College Data
::::
::::{.assignment-container}
Use the script `Colleges.R` and answer the following questions:

* Compute simple summary statistics for all variables in the data frame

* Which college has the highest cost for room and board?

* Which college has the highest graduation rate?

* Which colleges have graduation rates above 95%?

* Are there public universities with a graduation rate above 95%?

* Create a scatterplot of graduation rate versus costs for room and board with 
data points colored by public/private state of the college.

* Create a scatterplot of full time undergraduate enrollment versus out-of-state 
tuition. Color the data points according to the public/private state of the college.

* Create histograms of the out-of-state tuition and compare private and public 
colleges. Repeat for the graduation rate.

What other questions do you suggest asking? 

Did the exploratory data analysis so far trigger new questions about the 
data you did not have before?

::::
:::


## R Resources

- [R for Data Science, 2nd ed.](https://r4ds.hadley.nz/) [@Wickham_RDS]. 

- [Advanced R](http://adv-r.had.co.nz/) [@Wickham_AdvR].

- [Modern Data Science with R, 2nd ed.](https://mdsr-book.github.io/mdsr3e/) [@Baumer_etal].

- [R Graphics Cookbook: Practical Recipes for Visualizing Data, 2nd ed.](https://r-graphics.org/) [@Chang_2018]

- [R Markdown: The Definite Guide](https://bookdown.org/yihui/rmarkdown/) [@Xie_etal]

- [R Markdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/) [@Xie_Cookbook]

- [Mastering Software Development in R](https://bookdown.org/rdpeng/RProgDA/) [@Pengetal2020]



